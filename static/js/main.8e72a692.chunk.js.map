{"version":3,"sources":["components/searchbar/SearchBar.jsx","components/nominations/Nominations.jsx","components/pageSection/PageSection.jsx","assets/noImage.jpg","components/results/movieCard/MovieCard.jsx","components/results/resMainComp/ResMainComp.jsx","_config/config.js","App.js","index.js"],"names":["SearchBar","searchMovies","className","type","name","id","placeholder","onChange","event","target","value","Nominations","nomination","setNominate","src","Poster","alt","imdbID","Title","Year","onClick","PageSection","totalPages","searchText","currentPage","useState","pageArray","setPageArray","backPage","setBackPage","forwardPage","setForwardPage","selectedPage","setSelectedPage","setUpPageArray","pageSelected","parseInt","i","pageStart","Math","floor","pageEnd","floorVal","pageArr","pages","pageNumber","pageStatus","push","actionPageNo","pgNo","useEffect","length","map","data","MovieCard","movie","noImage","ResMainComp","movies","nominations","index","filter","nom","api","process","App","setSearchText","setMovies","setNominations","setTotalPages","setCurrentPage","AddNomation","removeNomination","newNominations","params","pageNo","a","page","undefined","url","axios","get","then","response","totalResults","Response","Search","forEach","m","alert","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8e72a692.chunk.js","sourcesContent":["import './searchbar.scss';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst SearchBar = ({searchMovies}) => {\n    return (\n        <div className=\"searchContainer\">\n            <div className=\"searchCard\">\n                <div className=\"searchbar\">\n                    {/* <div className=\"labelDiv\">\n                        <label htmlFor=\"searchBar\">Movie Title: </label>\n                    </div> */}\n                    <div className=\"searchIconDiv\">\n                        <SearchIcon className=\"magIcon\"/>\n                    </div>\n                    <div className=\"inputDiv\">\n                        <input type=\"text\" name=\"searchbar\" id=\"searchbar\" placeholder=\"Please enter movie \" className=\"searchBarInp\" onChange={(event) => searchMovies(event.target.value)}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SearchBar\n","import './nominations.scss';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nconst Nominations = ({nomination, setNominate}) => {\n    return (\n        <div className=\"nominationCard\">\n            <div className=\"desc\">\n                <div className=\"nomCardImg\">\n                    <img src={nomination.Poster} alt={nomination.imdbID} />\n                </div>\n                <div className=\"nomTitle\">\n                    <strong className=\"nomination\">{nomination.Title}</strong>\n                    <p>Year: {nomination.Year}</p>\n                </div>\n            </div>\n            <div className=\"actionNom\" >\n                <CancelIcon onClick={() => setNominate(nomination.imdbID)}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Nominations\n","import { useState, useEffect } from \"react\";\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\nimport ArrowForwardIosIcon from '@material-ui/icons/ArrowForwardIos';\nimport './pageSection.scss'\n\n\nconst PageSection = ({totalPages, searchMovies, searchText, currentPage}) => {\n\n    const [pageArray, setPageArray] = useState([]);    \n    const [backPage, setBackPage] = useState();\n    const [forwardPage, setForwardPage] = useState();\n    const [selectedPage, setSelectedPage] = useState(\"1\");\n\n    const setUpPageArray = (pageSelected) => {\n\n        setSelectedPage(pageSelected)\n    \n          let pageRemainder = parseInt(pageSelected)%10;\n          \n          let pageStart = Math.floor(pageSelected/10)*10 + 1 ;\n          let pageEnd = pageStart + 9;\n\n          \n          if(parseInt(pageSelected) - 10 > 0) {\n              setBackPage(Math.floor(parseInt(pageSelected)/10)*10 );\n            }  else {\n                setBackPage(\"0\");\n            }\n        \n            \n\n          if(parseInt(pageSelected) + 10 < parseInt(totalPages) ) {\n              \n\n                  let floorVal = (Math.floor(parseInt(pageSelected) / 10) * 10) +11 ;\n                  setForwardPage(floorVal);\n                  \n              \n          } else {\n              setForwardPage(totalPages);\n          }\n          \n          if(pageEnd > totalPages) pageEnd = totalPages;\n          var i;\n          const pageArr = [];\n\n          for(i = pageStart; i<= pageEnd; i++) {\n\n\n            const pageSelected = (currentPage === i) ? true : false\n            const pages = {\n              id: i,\n              pageNumber: i,\n              pageStatus: pageSelected\n            }\n            pageArr.push(pages);\n          }\n          \n          setPageArray(pageArr);\n         \n        \n      }\n\n      const actionPageNo = (pgNo) => {\n        setUpPageArray(pgNo);\n        searchMovies(searchText, pgNo);\n      }\n\n    useEffect(() => {\n        setBackPage(\"0\");\n        setForwardPage(\"11\");\n       setUpPageArray(parseInt(\"1\"));\n    }, [currentPage, totalPages])\n\n    return (\n        <> \n            <div className=\"pageContainer\">  \n\n            \n                {\n                    parseInt(backPage) > 0 && \n                    \n                    <div className=\"pgCard\" onClick={() => actionPageNo(backPage)} >\n                            <ArrowBackIosIcon />\n                    </div>          \n                }\n\n            {\n                pageArray.length > 0 && pageArray.map((data) => (\n                    <div className={selectedPage === data.pageNumber ? \"pgCard pgActive\" : \"pgCard\"} key={data.id} >\n                        <span onClick={() => actionPageNo(data.pageNumber)}>{data.pageNumber}</span>    \n                    </div>\n                ))\n            }\n            {\n                parseInt(totalPages) !== parseInt(forwardPage) && \n                \n                <div className=\"pgCard\" onClick={() => actionPageNo(forwardPage)} >\n                    <ArrowForwardIosIcon />\n                    \n                </div>\n            }\n\n\n            </div>\n            <div className=\"pageDesc\">\n                <div className=\"totPage\">\n            <span>Total pages: {totalPages}</span>\n\n                </div>\n                <div className=\"currPage\">\n            <span>Current page: {selectedPage}</span>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default PageSection\n","export default __webpack_public_path__ + \"static/media/noImage.f59bf5f9.jpg\";","import './movieCard.scss';\nimport noImage from '../../../assets/noImage.jpg';\n\n\nconst MovieCard = ({movie, setNominate, nomination}) => {    \n    return (\n        <div className=\"movieCard\" key={movie.imdbID}>\n            \n            <div className=\"posterDiv\">\n                <img src={movie.Poster === \"N/A\" ? noImage : movie.Poster} alt={movie.Title}/>\n            </div>\n\n            <div className=\"titleDiv\">\n                <div className=\"movieDescDiv\">\n                    <h4>{movie.Title}</h4>\n                </div>\n\n                <div className=\"otherDiv\">\n                    <div className=\"yearDiv\">\n                        <h4>Year: {movie.Year}</h4>\n                    </div>\n\n                    <div className={nomination? \"btnDiv activenominate\": \"btnDiv\"} onClick={() => setNominate(movie.imdbID)}>\n                        Nominate\n                    </div>\n                    \n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default MovieCard\n","import Nominations from '../../nominations/Nominations';\nimport PageSection from '../../pageSection/PageSection';\nimport MovieCard from '../movieCard/MovieCard';\nimport './resMainComp.scss';\n\nconst ResMainComp = ({searchText, movies, setNominate, nominations, totalPages, searchMovies}) => {\n\n    const nominationBool =(data) => {\n        if (data.length > 0) return true;\n        return false;\n    }\n    return (\n        <>\n            <div className=\"resMainContent\">\n                <div className=\"movieContainer\">\n                <div className=\"searchTxt\">\n                    <p>{!(searchText.length > 2 || movies.length > 0) && \"at least 3 characters are required for a search...\"}</p>\n                </div>\n                    {\n                        movies.map((movie, index) => (\n                            <MovieCard  \n                                setNominate={setNominate} \n                                movie={movie} \n                                nomination={nominationBool(nominations.filter(nom => nom.imdbID === movie.imdbID))} \n                                key={index}\n                            />\n                        ))\n                    }\n                </div>\n                <div className=\"nominationContainer\">\n                    <div className=\"nomConTitle\">\n                        <strong>Nominations</strong>\n                    </div>\n                    {\n                    nominations.length > 0 \n                    ? nominations.map(nomination => (\n                        <Nominations \n                            key={nomination.imdbID} \n                            nomination={nomination} \n                            setNominate={setNominate}\n                        />\n                    ))\n                    : (<span>no movies are nominated yet!</span>)\n                    }\n                    \n                </div>\n\n                \n\n            </div>\n\n            <PageSection totalPages={totalPages} searchText={searchText} searchMovies={searchMovies} />\n        </>\n    )\n}\n\nexport default ResMainComp\n","\n\nconst api = `http://www.omdbapi.com/?type=movie&apikey=${process.env.REACT_APP_APIKEY}&s=`;\n\n\nexport default api;","import { useState } from \"react\";\nimport SearchBar from \"./components/searchbar/SearchBar\";\nimport './app.scss';\nimport ResMainComp from \"./components/results/resMainComp/ResMainComp\";\nimport api from './_config/config';\nimport axios from \"axios\";\nimport PageSection from \"./components/pageSection/PageSection\";\n\nfunction App() {\n\n  const [searchText, setSearchText] = useState(\"\");\n  const [movies, setMovies] = useState([]);\n  const [nominations, setNominations] = useState([]);\n  const [totalPages, setTotalPages] = useState(0);\n  const [currentPage, setCurrentPage] = useState(\"1\");\n\n  const setNominate = (imdbID) =>  {\n    const nominee = nominations.filter((m) => m.imdbID === imdbID);\n\n    if(nominee.length === 0) {\n      if(nominations.length > 4) {\n        alert(\"You are restricted to nominate 5 movies only\");\n      } else {\n        AddNomation(imdbID);\n      }\n    } else{\n      removeNomination(imdbID);\n    }\n  }\n  \n  const AddNomation = (imdbID) => {\n    movies.filter((movie) => movie.imdbID === imdbID).map(data => {\n        setNominations([...nominations, data]);\n    });\n  }\n\n  const removeNomination = (imdbID) => {\n    const newNominations = nominations.filter((movie) => movie.imdbID !== imdbID);\n    setNominations(newNominations);\n  }\n\n  const searchMovies =async (params, pageNo) => {\n    \n    if(params !== \"\" && params.length > 2) {\n      setSearchText(params);\n      \n      let page = currentPage;\n      if(pageNo !== \"\" || pageNo !== null || pageNo !== undefined) {\n        page=pageNo;\n        \n        setCurrentPage(pageNo);\n      }\n      const url = `${api + params}&page=${page}`;\n\n      await axios.get(url).then((response) => {\n        setTotalPages(Math.floor(parseInt(response.data.totalResults)/10));\n        \n        if(response.data.Response === \"True\") {\n          const movies = [];\n          response.data.Search.forEach((movie) => movies.push(movie));\n          setMovies(movies);\n        }\n      });\n\n      \n    } else setSearchText(\"\");\n  }\n  \n\n  return (\n    <div className=\"App\">\n      <SearchBar searchMovies={searchMovies}/>\n      <ResMainComp setNominate={setNominate} searchText={searchText} movies={movies} nominations={nominations} totalPages={totalPages} searchMovies={searchMovies}/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}